/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sornyeteg;

import java.awt.Color;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author David
 */
public class Ablak extends javax.swing.JFrame {
        HLTTemp HLT;
        MTTemp MT;
        Sensor sens = new Sensor();

    /**
     * Creates new form Ablak
     * @throws java.lang.InterruptedException
     */
    public Ablak() throws InterruptedException {
        initComponents();
        
        sens.CreateSensors();
        
        HLT = new HLTTemp();
        HLT.setHLTTemp(30);
        HLT.setHLTTargetTemp(30);
        
        MT = new MTTemp();
        MT.setMTTemp(30);
        MT.setMTTargetTemp(30);

        Runnable a = new Runnable() {
        @Override
        public void run() {
             try {
                 MT.MTTempUpdater(sens.SensorStrings.get(0));
             } catch (InterruptedException | IOException ex) {
                 Logger.getLogger(Ablak.class.getName()).log(Level.SEVERE, null, ex);
             }
         }
        };
        new Thread(a).start();
        
        Runnable b = new Runnable() {
        @Override
        public void run() {
            try {
                HLT.HLTTempUpdater(sens.SensorStrings.get(1));
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(Ablak.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
        };
        new Thread(b).start();
        
        Runnable c = new Runnable() {
        @Override
        public void run() {
            try {
                CurrentMTTempUpdater();
            } catch (InterruptedException ex) {
                Logger.getLogger(Ablak.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
        };
        new Thread(c).start();
        
        Runnable d = new Runnable() {
        @Override
        public void run() {
            try {
                CurrentHLTTempUpdater();
            } catch (InterruptedException ex) {
                Logger.getLogger(Ablak.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
        };
        new Thread(d).start();
        
        Runnable e = new Runnable() {
        @Override
        public void run() {
            try {
                HLTTempStatusFieldUpdater();
            } catch (InterruptedException ex) {
                Logger.getLogger(Ablak.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
        };
        new Thread(e).start();
        
        Runnable f = new Runnable() {
        @Override
        public void run() {
            try {
                MTTempStatusFieldUpdater();
            } catch (InterruptedException ex) {
                Logger.getLogger(Ablak.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
        };
        new Thread(f).start();       

        Runnable g = new Runnable() {
        @Override
        public void run() {
            try {
                HLTSensorStatusUpdater();
            } catch (InterruptedException ex) {
                Logger.getLogger(Ablak.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
        };
        new Thread(g).start();
        
        Runnable h = new Runnable() {
        @Override
        public void run() {
            try {
                MTSensorStatusUpdater();
            } catch (InterruptedException ex) {
                Logger.getLogger(Ablak.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
        };
        new Thread(h).start(); 
    }

    /** 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CurrentMTTemp = new javax.swing.JTextField();
        CurrentHLTTemp = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        MTTargetTemp = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        HLTTargetTemp = new javax.swing.JTextField();
        SetMTTempButton = new javax.swing.JButton();
        SetHLTTempButton = new javax.swing.JButton();
        MTTempStatusField = new javax.swing.JTextField();
        HLTTempStatusField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        MTProgressBar = new javax.swing.JProgressBar();
        HLTProgressBar = new javax.swing.JProgressBar();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ErrorArea = new javax.swing.JTextArea();
        MTSensorStatus = new javax.swing.JTextField();
        HLTSensorStatus = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sörnyeteg hőmérsékletszabályozó");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel2.setText("Mash Tun Temperature");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel3.setText("HLT Temperature");

        CurrentMTTemp.setBackground(new java.awt.Color(238, 238, 238));
        CurrentMTTemp.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        CurrentMTTemp.setText("0");

        CurrentHLTTemp.setBackground(new java.awt.Color(238, 238, 238));
        CurrentHLTTemp.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        CurrentHLTTemp.setText("0");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel4.setText("Current Temperature");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel5.setText("Current Temperature");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel6.setText("Target Temperature");

        MTTargetTemp.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        MTTargetTemp.setText("30");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel7.setText("Target Temperature");

        HLTTargetTemp.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        HLTTargetTemp.setText("30");

        SetMTTempButton.setText("Set MT Temp");
        SetMTTempButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetMTTempButtonActionPerformed(evt);
            }
        });

        SetHLTTempButton.setText("Set HLT Temp");
        SetHLTTempButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetHLTTempButtonActionPerformed(evt);
            }
        });

        MTTempStatusField.setEditable(false);
        MTTempStatusField.setBackground(java.awt.Color.red);

        HLTTempStatusField.setEditable(false);
        HLTTempStatusField.setBackground(java.awt.Color.red);

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel8.setText("Heating Status");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel9.setText("Heating Status");

        MTProgressBar.setMinimumSize(new java.awt.Dimension(10, 50));
        MTProgressBar.setStringPainted(true);

        HLTProgressBar.setStringPainted(true);

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel10.setText("Temp Progress");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel11.setText("Temp Progress");

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel12.setText("Set Temperature");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel13.setText("Set Temperature");

        ErrorArea.setColumns(20);
        ErrorArea.setRows(5);
        jScrollPane1.setViewportView(ErrorArea);

        MTSensorStatus.setEditable(false);
        MTSensorStatus.setBackground(java.awt.Color.red);

        HLTSensorStatus.setEditable(false);
        HLTSensorStatus.setBackground(java.awt.Color.red);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel12))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(SetMTTempButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(MTTargetTemp, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                                            .addComponent(MTTempStatusField)))
                                    .addComponent(MTProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(MTSensorStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(18, 18, 18)
                                        .addComponent(CurrentMTTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(137, 137, 137)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(75, 75, 75))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(HLTTempStatusField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel13)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SetHLTTempButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(18, 18, 18)
                                    .addComponent(CurrentHLTTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(HLTTargetTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(HLTProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(135, 135, 135))
            .addGroup(layout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(226, 226, 226))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(HLTSensorStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(271, 271, 271))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MTSensorStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HLTSensorStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CurrentMTTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CurrentHLTTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MTTargetTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(HLTTargetTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SetHLTTempButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SetMTTempButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MTTempStatusField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel9))
                    .addComponent(HLTTempStatusField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MTProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HLTProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SetHLTTempButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetHLTTempButtonActionPerformed

        if (!"".equals(HLTTargetTemp.getText())){
            HLT.setHLTTargetTemp(Double.parseDouble(HLTTargetTemp.getText()));
            ErrorArea.append("HLT Target Temperature has been set to: " + HLT.getHLTTargetTemp() + " C\n");
        }else {
            ErrorArea.append("Please input HLT Target Temperature!\n");
        }
    }//GEN-LAST:event_SetHLTTempButtonActionPerformed
        
    private void SetMTTempButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetMTTempButtonActionPerformed
        
        if (!"".equals(MTTargetTemp.getText())){
            MT.setMTTargetTemp(Double.parseDouble(MTTargetTemp.getText()));
            ErrorArea.append("MT Target Temperature has been set to: " + MT.getMTTargetTemp() + " C\n");
        }else {
            ErrorArea.append("Please input MT Target Temperature!\n");
        }
    }//GEN-LAST:event_SetMTTempButtonActionPerformed

    public void CurrentHLTTempUpdater() throws InterruptedException{
        while(true) {
            if(!"".equals(HLT.getHLTTemp())){
                CurrentHLTTemp.setText(Double.toString(HLT.getHLTTemp()));
                sleep(505);    
            }else {
                sleep(5);
            }
        }
    }
    
    public void CurrentMTTempUpdater() throws InterruptedException{
        while(true) {
            if(!"".equals(MT.getMTTemp())){
                CurrentMTTemp.setText(Double.toString(MT.getMTTemp()));
                sleep(505);    
            }else {
                sleep(5);
            }
        }
    }
    
    public void HLTSensorStatusUpdater() throws InterruptedException{
        while(true) {
            if(HLT.HLTSensorAvailable==true){
                HLTSensorStatus.setBackground(new java.awt.Color(51,153,0));
                sleep(505);    
            }else {
                sleep(5);
                HLTSensorStatus.setBackground(Color.red);
            }
        }
    }
    
    public void MTSensorStatusUpdater() throws InterruptedException{
        while(true) {
            if(MT.MTSensorAvailable==true){
                MTSensorStatus.setBackground(new java.awt.Color(51,153,0));
                sleep(505);    
            }else {
                sleep(5);
                MTSensorStatus.setBackground(Color.red);
            }
        }
    }
    
    public void HLTTempStatusFieldUpdater() throws InterruptedException{
        while (true){
            double act=1; 
            if(!"".equals(Double.toString(HLT.getHLTTemp()))){
                act = HLT.getHLTTemp();
            }else {
                sleep(5);
            }
            double targ = 1;
            if(!"".equals(Double.toString(HLT.getHLTTargetTemp()))){
                targ = HLT.getHLTTargetTemp();
            }else {
                sleep(5);
            }
            if(act<targ) {
                HLTTempStatusField.setBackground(Color.red);
                HLTProgressBar.setString(null);
                HLTProgressBar.setForeground(null);
                HLTProgressBar.setValue((int) ((act/targ)*100));
            } else {
                HLTTempStatusField.setBackground(new java.awt.Color(51,153,0));
                if(((act/targ)*100)>=100 && ((act/targ)*100)<=110){
                    HLTProgressBar.setValue(100);
                    HLTProgressBar.setString(Integer.toString((int) ((act/targ)*100)) + "%");
                    HLTProgressBar.setForeground(new java.awt.Color(51,153,0));
                }
                if(((act/targ)*100)>110){
                    HLTProgressBar.setValue(100);
                    HLTProgressBar.setString(Integer.toString((int) ((act/targ)*100)) + "%");
                    HLTProgressBar.setForeground(Color.red);
                } 
            }
            sleep(510);
        }
    }

    public void MTTempStatusFieldUpdater() throws InterruptedException{
        while (true) {        
            double act = 1;
            if(!"".equals(Double.toString(MT.getMTTemp()))){
                act = MT.getMTTemp();
            }else {
                sleep(5);
            }         
            double targ = 1;
            if(!"".equals(Double.toString(MT.getMTTargetTemp()))){
                targ = MT.getMTTargetTemp();
            }else {
                sleep(5);
            }
            if(act<targ) {
                MTTempStatusField.setBackground(Color.red);
                MTProgressBar.setString(null);
                MTProgressBar.setForeground(null);
                MTProgressBar.setValue((int) ((act/targ)*100)); 
            } else {
                MTTempStatusField.setBackground(new java.awt.Color(51,153,0));
                if(((act/targ)*100)>=100 && ((act/targ)*100)<=110){
                    MTProgressBar.setValue(100);
                    MTProgressBar.setString(Integer.toString((int) ((act/targ)*100)) + "%");
                    MTProgressBar.setForeground(new java.awt.Color(51,153,0));
                }
                if(((act/targ)*100)>110){
                    MTProgressBar.setValue(100);
                    MTProgressBar.setString(Integer.toString((int) ((act/targ)*100)) + "%");
                    MTProgressBar.setForeground(Color.red);
                } 
            }
            sleep(510);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ablak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ablak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ablak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ablak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {    
                    new Ablak().setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Ablak.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField CurrentHLTTemp;
    public javax.swing.JTextField CurrentMTTemp;
    private javax.swing.JTextArea ErrorArea;
    private javax.swing.JProgressBar HLTProgressBar;
    public javax.swing.JTextField HLTSensorStatus;
    private javax.swing.JTextField HLTTargetTemp;
    public javax.swing.JTextField HLTTempStatusField;
    private javax.swing.JProgressBar MTProgressBar;
    public javax.swing.JTextField MTSensorStatus;
    private javax.swing.JTextField MTTargetTemp;
    public javax.swing.JTextField MTTempStatusField;
    private javax.swing.JButton SetHLTTempButton;
    private javax.swing.JButton SetMTTempButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
